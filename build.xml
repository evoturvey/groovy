<?xml version="1.0" encoding="UTF-8"?>
<!--
Ant build script for Groovy.

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is
distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
implied. See the License for the specific language governing permissions and limitations under the License.

This work is copyright by the author(s) and is part of a greater work collectively copyright by the
Groovy community. See the NOTICE.txt file distributed with this work for additional information.

Author : Russel Winder
Author : Paul King
$Revision$ ($LastChangedBy$)
$Date$
-->
<project name="Groovy" default="all" basedir=".">
    <property name="rootDirectory" location="."/>
    <property name="bootstrapDirectory" location="bootstrap"/>
    <import file="config/ant/build-support.xml"/>

    <property name="sourceDirectory" value="src"/>
    <property name="mainSourceDirectory" location="${sourceDirectory}/main"/>
    <property name="testSourceDirectory" value="${sourceDirectory}/test"/>
    <property name="toolsSourceDirectory" location="${sourceDirectory}/tools"/>
    <property name="targetDirectory" value="target"/>
    <property name="stagingDirectory" value="${targetDirectory}/staging"/>
    <property name="docsDirectory" value="${targetDirectory}/html"/>
    <property name="mainClassesDirectory" value="${targetDirectory}/classes"/>
    <property name="testClassesDirectory" value="${targetDirectory}/test-classes"/>
    <property name="toolsClassesDirectory" value="${targetDirectory}/tools-classes"/>
    <property name="instrumentedClassesDirectory" value="${targetDirectory}/instrumented-classes"/>
    <property name="reportsDirectory" value="${targetDirectory}/reports"/>
    <property name="targetLibDirectory" value="${targetDirectory}/lib"/>
    <property name="targetDistDirectory" value="${targetDirectory}/dist"/>
    <property name="antlrDirectory" value="${mainSourceDirectory}/org/codehaus/groovy/antlr"/>
    <property name="groovyParserDirectory" value="${antlrDirectory}/parser"/>
    <property name="javaParserDirectory" value="${antlrDirectory}/java"/>
    <property file="build.properties"/>

    <!-- dependency directories -->
    <property name="mainDirectory" value="${targetLibDirectory}/main"/>
    <property name="mainTestDirectory" value="${mainDirectory}/test"/>
    <property name="mainCompileDirectory" value="${mainDirectory}/compile"/>
    <property name="mainRuntimeDirectory" value="${mainDirectory}/runtime"/>
    <property name="antlrJar" value="${mainCompileDirectory}/antlr-2.7.6.jar"/>
    <property name="toolsDirectory" value="${targetLibDirectory}/tools"/>

    <target name="ensureGrammers" description="Ensure all the files generated from the Antlr grammar are up to date.">
        <mkdir dir="${groovyParserDirectory}"/>
        <antlr target="${antlrDirectory}/groovy.g" outputdirectory="${groovyParserDirectory}">
            <classpath>
                <pathelement location="${antlrJar}"/>
            </classpath>
        </antlr>
        <antlr target="${javaParserDirectory}/java.g" outputdirectory="${javaParserDirectory}">
            <classpath>
                <pathelement location="${antlrJar}"/>
            </classpath>
        </antlr>
    </target>

    <target name="init" depends="-fetchDependencies"/>

    <target name="compileMain" depends="init,ensureGrammers"
            description="Compile the Java and Groovy code in the main source.">
        <mkdir dir="${mainClassesDirectory}"/>
        <mkdir dir="${toolsClassesDirectory}"/>
        <javac srcdir="${mainSourceDirectory}" includeantruntime="false" destdir="${mainClassesDirectory}" debug="yes"
               source="1.4" target="1.4" fork="true" classpathref="mainCompilePath"/>

        <!--
        There seems to be a problem using the groovyc task directly.  If we use it directly as below then there is an
        NoClassDefFoundError for class org/objectweb/asm/Opcodes.  If however we run a separate java task to run
        the groovyc task then everything works as it should.

        <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpath="${mainClassesDirectory}"/>
        <groovyc srcdir="${mainSourceDirectory}" destdir="${mainClassesDirectory}" classpathref="groovyMainCompileDependencies"/>
        -->
        <echo message="Groovyc of main code."/>
        <java classname="org.codehaus.groovy.ant.Groovyc">
            <classpath>
                <path refid="mainCompilePath"/>
                <pathelement path="${mainClassesDirectory}"/>
            </classpath>
            <arg value="${mainClassesDirectory}"/>
            <arg value="${mainSourceDirectory}"/>
        </java>
        <!-- TODO split into own target? -->
        <echo message="Groovyc of tools code."/>
        <java classname="org.codehaus.groovy.ant.Groovyc">
            <classpath>
                <path refid="toolsPath"/>
                <pathelement path="${mainClassesDirectory}"/>
                <path refid="mainCompilePath"/>
            </classpath>
            <arg value="${toolsClassesDirectory}"/>
            <arg value="${toolsSourceDirectory}"/>
        </java>
    </target>

    <target name="-initReports">
        <mkdir dir="${reportsDirectory}"/>
    </target>

    <target name="compileTest" depends="compileMain" description="Compile the Java and Groovy code in the test source.">
        <mkdir dir="${testClassesDirectory}"/>
        <javac srcdir="${testSourceDirectory}" destdir="${testClassesDirectory}" includeantruntime="false" debug="yes"
               source="1.4" target="1.4" fork="true" excludes="UberTestCase*.java">
            <classpath>
                <path refid="mainTestPath"/>
                <pathelement path="${mainClassesDirectory}"/>
            </classpath>
        </javac>

        <!--
        Compiling all the Groovy tests requires a large amount of memory, 128M it appears.  To avoid having to
        require people to put command line arguments on the ant command line, we fork a new JVM with the
        required parameters.  Unfortunately, the groovyc task does not support the fork attribute.

        <taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpath="${mainClassesDirectory}"/>
        <groovyc srcdir="${testSourceDirectory}" destdir="${testClassesDirectory}" classpathref="groovyTestCompileDependencies"/>

        This raises the question:  Why does compiling the Groovy tests take so much memory?
        -->
        <echo message="Groovyc of test code."/>
        <java classname="org.codehaus.groovy.ant.Groovyc" fork="true" maxmemory="128M">
            <classpath>
                <path refid="mainTestPath"/>
                <pathelement path="${mainClassesDirectory}"/>
                <pathelement path="${testClassesDirectory}"/>
            </classpath>
            <arg value="${testClassesDirectory}"/>
            <arg value="${testSourceDirectory}"/>
        </java>
        <javac srcdir="${testSourceDirectory}" destdir="${testClassesDirectory}" debug="yes"
               source="1.4" target="1.4" classpathref="mainTestPath" includes="UberTestCase*.java">
            <classpath>
                <path refid="mainTestPath"/>
                <pathelement path="${mainClassesDirectory}"/>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="-initReports,compileTest,-instrument" description="Compile and test all the classes.">
        <property name="junitRawDirectory" value="${targetDirectory}/test-reports"/>
        <property name="junitReportsDirectory" value="${reportsDirectory}/junit"/>
        <mkdir dir="${junitRawDirectory}"/>
        <junit printsummary="true" fork="true" includeantruntime="false" failureproperty="testFailed">
            <formatter type="xml"/>
            <batchtest todir="${junitRawDirectory}">
                <fileset dir="${testClassesDirectory}" includes="UberTest*.class"/>
            </batchtest>
            <classpath>
                <path refid="mainTestPath"/>
                <!-- instrumented before non -->
                <pathelement path="${instrumentedClassesDirectory}"/>
                <pathelement path="${mainClassesDirectory}"/>
                <pathelement path="${testClassesDirectory}"/>
                <pathelement path="src/test"/>
                <path refid="coberturaPath"/>
            </classpath>
        </junit>
        <mkdir dir="${junitReportsDirectory}"/>
        <junitreport tofile="${junitRawDirectory}/Results.xml">
            <fileset dir="${junitRawDirectory}" includes="TEST-*.xml"/>
            <report format="frames" todir="${junitReportsDirectory}"/>
        </junitreport>
    </target>

    <target name="reportTestFailed" depends="test,-coverageReport" if="testFailed">
        <echo>Test failed, not processing further targets.</echo>
    </target>

    <target name="-initJars" depends="test">
        <mkdir dir="${targetDistDirectory}"/>
    </target>

    <target name="actuallyCreateJars" depends="-initJars" unless="testFailed">
        <antcall target="-createBaseJar"/>
        <antcall target="-createStarterJar"/>
        <antcall target="-createEmbeddableJar"/>
    </target>

    <target name="-createBaseJar">
        <jar destfile="${targetDistDirectory}/groovy-${groovyVersion}.jar" basedir="${mainClassesDirectory}"
             excludes="*.groovy"/>
    </target>

    <target name="-createStarterJar">
        <jar destfile="${targetDistDirectory}/groovy-starter-${groovyVersion}.jar">
            <fileset dir="${mainClassesDirectory}">
                <include name="org/codehaus/groovy/tools/RootLoader*.class"/>
                <include name="org/codehaus/groovy/tools/GroovyStarter*.class"/>
                <include name="org/codehaus/groovy/tools/LoaderConfiguration*.class"/>
            </fileset>
        </jar>
    </target>

    <target name="-createEmbeddableJar" depends="-jarjarTaskdef">
        <delete dir="${stagingDirectory}" quiet="true"/>
        <mkdir dir="${stagingDirectory}"/>
        <unzip dest="${stagingDirectory}">
            <fileset dir="${mainRuntimeDirectory}">
                <include name="antlr*.jar"/>
                <include name="asm*.jar"/>
                <exclude name="asm-attr*.jar"/>
                <exclude name="asm-util*.jar"/>
                <exclude name="asm-analysis*.jar"/>
            </fileset>
        </unzip>
        <unzip dest="${stagingDirectory}">
            <fileset dir="${targetDistDirectory}">
                <include name="groovy-${groovyVersion}.jar"/>
            </fileset>
        </unzip>
        <copy toDir="${stagingDirectory}/META-INF">
            <fileset dir="${basedir}">
                <include name="ASM-LICENSE.txt"/>
            </fileset>
        </copy>
        <mkdir dir="${targetDistDirectory}"/>
        <jarjar jarfile="${targetDistDirectory}/groovy-all-${groovyVersion}.jar"
                manifest="${stagingDirectory}/META-INF/MANIFEST.MF">
            <fileset dir="${stagingDirectory}"/>
            <rule pattern="antlr.**" result="groovyjarjarantlr.@1"/>
            <rule pattern="org.objectweb.**" result="groovyjarjarasm.@1"/>
        </jarjar>
    </target>

    <target name="all" depends="reportTestFailed,actuallyCreateJars"
            description="Build Groovy and create the jarfiles."/>

    <target name="clean" description="Clean out the built materials.">
        <delete dir="${targetDirectory}" quiet="true"/>
        <delete quiet="true">
            <fileset dir="." includes="**/*~"/>
            <fileset dir="${groovyParserDirectory}" includes="Groovy*.*"/>
            <fileset dir="${javaParserDirectory}"
                     includes="JavaLexer.java,JavaRecognizer.java,JavaTokenTypes.java,JavaTokenTypes.txt"/>
        </delete>
    </target>

    <target name="checkstyle" depends="init,-initReports">
        <path id="checkstyleLibPath">
            <pathelement path="${mainClassesDirectory}"/>
            <path refid="mainTestPath"/>
        </path>
        <antcall target="-checkstyle">
            <param name="checkstyleReportDirectory" value="${reportsDirectory}/checkstyle"/>
            <param name="checkstyleSourceDirectory" value="${mainSourceDirectory}"/>
        </antcall>
    </target>

    <target name="doc" depends="compileMain">
        <mkdir dir="${docsDirectory}"/>
        <java classname="org.codehaus.groovy.tools.DocGenerator" fork="yes">
            <classpath>
                <pathelement path="${toolsClassesDirectory}"/>
                <path refid="toolsPath"/>
                <pathelement path="${mainClassesDirectory}"/>
            </classpath>
        </java>
        <property name="title" value="Groovy"/>
        <javadoc destdir="${docsDirectory}/api" author="true" version="true"
                 windowtitle="${title} (${groovyVersion})" doctitle="${title} (${groovyVersion})"
                 encoding="ISO-8859-1" useexternalfile="true"
                 footer="Copyright &amp;copy; 2003-2007 The Groovy Community. All rights reserved.">
            <classpath>
                <path path="${mainClassesDirectory}"/>
                <fileset dir="${mainCompileDirectory}" includes="*.jar"/>
            </classpath>
            <fileset dir="${mainSourceDirectory}">
                <include name="**/*.java"/>
            </fileset>
            <link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
            <link href="http://www.dpml.net/api/ant/1.6.5"/>
            <link href="http://www.junit.org/junit/javadoc/3.8.1"/>
            <link href="http://java.sun.com/j2ee/1.4/docs/api"/>
        </javadoc>
    </target>

    <target name="install">
        <delete dir="${stagingDirectory}" quiet="true"/>
        <mkdir dir="${stagingDirectory}"/>
        <mkdir dir="${stagingDirectory}/lib"/>
        <mkdir dir="${stagingDirectory}/bin"/>
        <mkdir dir="${stagingDirectory}/conf"/>
        <mkdir dir="${stagingDirectory}/embeddable"/>
        <copy file="${targetDistDirectory}/groovy-${groovyVersion}.jar" toDir="${stagingDirectory}/lib"/>
        <copy file="${targetDistDirectory}/groovy-starter-${groovyVersion}.jar" toDir="${stagingDirectory}/lib"/>
        <copy file="${targetDistDirectory}/groovy-all-${groovyVersion}.jar" toDir="${stagingDirectory}/embeddable"/>
        <copy toDir="${stagingDirectory}/lib">
            <fileset dir="${mainRuntimeDirectory}">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <copy toDir="${stagingDirectory}/conf">
            <fileset dir="${sourceDirectory}/conf">
                <include name="*"/>
            </fileset>
        </copy>
        <copy toDir="${stagingDirectory}/bin">
            <fileset dir="${sourceDirectory}/bin">
                <include name="*"/>
            </fileset>
        </copy>
        <fixcrlf srcdir="${stagingDirectory}/bin" eol="lf" excludes="*.bat"/>
        <fixcrlf srcdir="${stagingDirectory}/bin" eol="crlf" includes="*.bat"/>
        <chmod perm="ugo+x">
            <fileset dir="${stagingDirectory}/bin">
                <include name="*"/>
                <include name="*.*"/>
            </fileset>
        </chmod>
    </target>
</project>
