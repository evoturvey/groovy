// $ANTLR 2.7.5 (20050128): "groovy.g" -> "GroovyRecognizer.java"$

package org.codehaus.groovy.antlr.parser;
import org.codehaus.groovy.antlr.*;
import java.util.*;
import java.io.InputStream;
import java.io.Reader;
import antlr.InputBuffer;
import antlr.LexerSharedInputState;

public interface GroovyTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int BLOCK = 4;
	int MODIFIERS = 5;
	int OBJBLOCK = 6;
	int SLIST = 7;
	int METHOD_DEF = 8;
	int VARIABLE_DEF = 9;
	int INSTANCE_INIT = 10;
	int STATIC_INIT = 11;
	int TYPE = 12;
	int CLASS_DEF = 13;
	int INTERFACE_DEF = 14;
	int PACKAGE_DEF = 15;
	int ARRAY_DECLARATOR = 16;
	int EXTENDS_CLAUSE = 17;
	int IMPLEMENTS_CLAUSE = 18;
	int PARAMETERS = 19;
	int PARAMETER_DEF = 20;
	int LABELED_STAT = 21;
	int TYPECAST = 22;
	int INDEX_OP = 23;
	int POST_INC = 24;
	int POST_DEC = 25;
	int METHOD_CALL = 26;
	int EXPR = 27;
	int IMPORT = 28;
	int UNARY_MINUS = 29;
	int UNARY_PLUS = 30;
	int CASE_GROUP = 31;
	int ELIST = 32;
	int FOR_INIT = 33;
	int FOR_CONDITION = 34;
	int FOR_ITERATOR = 35;
	int EMPTY_STAT = 36;
	int FINAL = 37;
	int ABSTRACT = 38;
	int UNUSED_GOTO = 39;
	int UNUSED_CONST = 40;
	int UNUSED_DO = 41;
	int STRICTFP = 42;
	int SUPER_CTOR_CALL = 43;
	int CTOR_CALL = 44;
	int CTOR_IDENT = 45;
	int VARIABLE_PARAMETER_DEF = 46;
	int STRING_CONSTRUCTOR = 47;
	int STRING_CTOR_MIDDLE = 48;
	int CLOSED_BLOCK = 49;
	int IMPLICIT_PARAMETERS = 50;
	int DEF = 51;
	int SELECT_SLOT = 52;
	int REFLECT_MEMBER = 53;
	int DYNAMIC_MEMBER = 54;
	int LABELED_ARG = 55;
	int SPREAD_ARG = 56;
	int OPTIONAL_ARG = 57;
	int SCOPE_ESCAPE = 58;
	int LIST_CONSTRUCTOR = 59;
	int MAP_CONSTRUCTOR = 60;
	int FOR_IN_ITERABLE = 61;
	int RANGE_EXCLUSIVE = 62;
	int STATIC_IMPORT = 63;
	int ENUM_DEF = 64;
	int ENUM_CONSTANT_DEF = 65;
	int FOR_EACH_CLAUSE = 66;
	int ANNOTATION_DEF = 67;
	int ANNOTATIONS = 68;
	int ANNOTATION = 69;
	int ANNOTATION_MEMBER_VALUE_PAIR = 70;
	int ANNOTATION_FIELD_DEF = 71;
	int ANNOTATION_ARRAY_INIT = 72;
	int TYPE_ARGUMENTS = 73;
	int TYPE_ARGUMENT = 74;
	int TYPE_PARAMETERS = 75;
	int TYPE_PARAMETER = 76;
	int WILDCARD_TYPE = 77;
	int TYPE_UPPER_BOUNDS = 78;
	int TYPE_LOWER_BOUNDS = 79;
	int LITERAL_package = 80;
	int LITERAL_import = 81;
	int LITERAL_static = 82;
	int AT = 83;
	int LBRACK = 84;
	int RBRACK = 85;
	int IDENT = 86;
	int LPAREN = 87;
	int RPAREN = 88;
	int LITERAL_class = 89;
	int LITERAL_interface = 90;
	int LITERAL_enum = 91;
	int DOT = 92;
	int QUESTION = 93;
	int LITERAL_extends = 94;
	int LITERAL_super = 95;
	int LT = 96;
	int COMMA = 97;
	int GT = 98;
	int SR = 99;
	int BSR = 100;
	int LITERAL_void = 101;
	int LITERAL_boolean = 102;
	int LITERAL_byte = 103;
	int LITERAL_char = 104;
	int LITERAL_short = 105;
	int LITERAL_int = 106;
	int LITERAL_float = 107;
	int LITERAL_long = 108;
	int LITERAL_double = 109;
	int LITERAL_any = 110;
	int STAR = 111;
	int LITERAL_as = 112;
	int LITERAL_private = 113;
	int LITERAL_public = 114;
	int LITERAL_protected = 115;
	int LITERAL_transient = 116;
	int LITERAL_native = 117;
	int LITERAL_threadsafe = 118;
	int LITERAL_synchronized = 119;
	int LITERAL_volatile = 120;
	int ASSIGN = 121;
	int LCURLY = 122;
	int RCURLY = 123;
	int BAND = 124;
	int SEMI = 125;
	int LITERAL_default = 126;
	int LITERAL_implements = 127;
	int LITERAL_this = 128;
	int STRING_LITERAL = 129;
	int LITERAL_throws = 130;
	int TRIPLE_DOT = 131;
	int BOR = 132;
	int LOR = 133;
	int COLON = 134;
	int LITERAL_if = 135;
	int LITERAL_else = 136;
	int LITERAL_while = 137;
	int LITERAL_with = 138;
	int LITERAL_switch = 139;
	int LITERAL_for = 140;
	int LITERAL_in = 141;
	int LITERAL_return = 142;
	int LITERAL_break = 143;
	int LITERAL_continue = 144;
	int LITERAL_throw = 145;
	int LITERAL_assert = 146;
	int INC = 147;
	int DEC = 148;
	int LITERAL_case = 149;
	int LITERAL_try = 150;
	int LITERAL_finally = 151;
	int LITERAL_catch = 152;
	int PLUS_ASSIGN = 153;
	int MINUS_ASSIGN = 154;
	int STAR_ASSIGN = 155;
	int DIV_ASSIGN = 156;
	int MOD_ASSIGN = 157;
	int SR_ASSIGN = 158;
	int BSR_ASSIGN = 159;
	int SL_ASSIGN = 160;
	int BAND_ASSIGN = 161;
	int BXOR_ASSIGN = 162;
	int BOR_ASSIGN = 163;
	int STAR_STAR_ASSIGN = 164;
	int STAR_DOT = 165;
	int QUESTION_DOT = 166;
	int LBRACE = 167;
	int LAND = 168;
	int BXOR = 169;
	int REGEX_FIND = 170;
	int REGEX_MATCH = 171;
	int NOT_EQUAL = 172;
	int EQUAL = 173;
	int COMPARE_TO = 174;
	int LE = 175;
	int GE = 176;
	int LITERAL_instanceof = 177;
	int SL = 178;
	int RANGE_INCLUSIVE = 179;
	int PLUS = 180;
	int MINUS = 181;
	int DIV = 182;
	int MOD = 183;
	int STAR_STAR = 184;
	int DOLLAR = 185;
	int BNOT = 186;
	int LNOT = 187;
	int LITERAL_true = 188;
	int LITERAL_false = 189;
	int LITERAL_null = 190;
	int STRING_CTOR_START = 191;
	int STRING_CTOR_END = 192;
	int LITERAL_new = 193;
	int NUM_INT = 194;
	int NUM_FLOAT = 195;
	int NUM_LONG = 196;
	int NUM_DOUBLE = 197;
	int NUM_BIG_INT = 198;
	int NUM_BIG_DECIMAL = 199;
	int NLS = 200;
	int WS = 201;
	int ONE_NL = 202;
	int SL_COMMENT = 203;
	int ML_COMMENT = 204;
	int STRING_CH = 205;
	int ESC = 206;
	int HEX_DIGIT = 207;
	int VOCAB = 208;
	int LETTER = 209;
	int DIGIT = 210;
	int EXPONENT = 211;
	int FLOAT_SUFFIX = 212;
	int BIG_SUFFIX = 213;
}
