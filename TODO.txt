Core Groovy Tasks
=================

* add metadata to the AST
	
* test while, do while

* access to local variables from inside a closure

* switch statements

* go through all not-working @todo tests in src/test
	
* to support dynamic mixins we should use dynamic proxies to allow
	a groovy object to change metaclass at runtime

* closures need to be able to access fields of outer class

* closures - handle passing in of variables from outer scope?	
	
* groovy dynamic proxy of any Java object in Java-land?

* immutable bean

* MetaClass.deriveMetaClass()
	MetaClass.addMixin(mixin)

* why does using the GroovyClassLoader cause the illegal access violation?


* constructors with map / tuple expressions, named parameter calling
 
* default values for parameters

* test try / catch with multiple exception types

* test [] on lists & maps?

* should we implement + and - for collections and maps?

	l = [1, 2] + [3, 4];
	assert l := [1, 2, 3, 4];
	
* should we implement get(String) on collection to implement nested property fetching?

* test use of overloaded setter methods & use of property notation
  so that the use of properties within a class should use setteres / getters.

* test the use of PropertyExpression
	a.b = c.d
	
* support static newInstance() method for constructors

* maybe split up ClassGenerator - do code gen & class gen separately

* create MetaClass for JMX - so we can treat JMX objects as if they're normal objects

* mixin support...

	SomeClass.addMixin(Foo);
	
	MetaClass.addInterceptor( new Interceptor() {
		filter(method) {
			return method.isPublic();
		}
		invoke(method, args) {
			// do something
			method.invoke(args);
		}
	});

	* allow meta classes to be added dynamically using closure syntax?
	e.g. Map?
	
	

ECLIPSE WORK
============

We really need to start work on the Eclipse plugin. I *so* want neat Eclipse support for groovy

* Run as JUnit support for Groovy! 

* Refactoring support for Groovy and tie it into the Java refactoring

* a WYSIWYG editor for Groovy. Though right now I've found that the Java Scrapbook editor is fine


JUNIT WORK
==========

* patch GroovyTestCase so that methods which return Object are included in the test. This avoids us having to
specify void for method return types.This requires a clever static method when we generate the
	bytecode which can instantiate a special kind of TestSuite
	unless there's another way?

OTHER STUFF
===========


OPTIMISATIONS
=============
* method invocations - if foo instanceof GroovyObject
then generate bytecode

foo.invokeMethod(method, args);

* could code generate the MetaClass with very efficient dynamic dispatch
	e.g. could switch() on the method name & then use real method invocation
	on the method instance


THINGS TO PONDER
================

* should we follow ruby rules where the last statement, if its an expression, then its an explicit return.

e.g.

foo() {
   2 * x
}

would implicitly mean

foo() {
   return 2 * x
}
