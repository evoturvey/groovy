1 Introduction to Groovy

Groovy is a new agile dynamic language for the JVM combining lots of great features from languages like Python, Ruby and Smalltalk 
and making them available to the Java developers using a Java-like syntax. 

Groovy is designed to help you get things done on the Java platform in a quicker, more concise and fun way - bringing the power
of Python and Ruby inside the Java platform. 

Groovy can be used as an alternative compiler to javac to generate standard Java bytecode to be used by any Java project
or it can be used dynamically as an alternative language such as for scripting Java objects, templating or writing unit test cases. 

1.1 Features

* {link:Closure support|closures.html} 
* {link:Native syntax for Lists and Maps|http://wiki.codehaus.org/groovy/SyntaxForTuplesListsMaps} 
* {link:Groovy Markup|markup.html} 
* {link:Groovy Path expression language|http://wiki.codehaus.org/groovy/PathExpressionLanguage} 
* {link:Groovlets|servlets.html} for implementing Servlets easily in simple Groovy scripts 
* {link:Groovy SQL|sql.html} for making SQL more Groovy 
* {link:Groovy Beans|beans.html} for simpler syntax for working with beans 
* {link:Groovy Template Engines|templates.html} which are pluggable, simple to use, integrate GPath and compile to bytecode
* {link:Ant Scripting|ant.html} 
* {link:Regex|regex.html} syntax for neater scripting with regular expressions 
* {link:Operator Overloading|operators.html} to simplify working with datatypes Collections and Maps 
* Polymorphic iteration and Autoboxing 
* Compiles straight to Java bytecode & works cleanly with all existing Java objects & libraries 


1.1 Getting started

Probably the best way to get started on Groovy is to {link:install a binary distribution|install.html} and 
play with it.

Or try reading the {link:user guide|guide.html} or browsing some of the links on the left of this page.

