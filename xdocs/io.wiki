1 Input/Output

Groovy provides a number of {link:helper methods|groovy-jdk.html} for working with IO. All of these work
with standard Java Reader/Writer and InputStream/OutputStream and File and URL classes.

The use of closures allows resources to be processed ensuring that things are properly closed irrespective
of exceptions. e.g. to iterate through each line of a file the following can be used...

{code:gsh}
import java.io.File

new File("foo.txt").eachLine { line | doSomething(line) }
{code}

If for whatever reason the ~~doSomething()~~ method were to throw an exception, the 
~~eachLine()~~ method ensures that the file resource is correctly closed. Similarly if an exception
occurs while reading, the resource will be closed too.

If you wish to use a reader/writer object or an input/output stream object there are helper methods to handle
the resource for you via a closure - which will automatically close down any resource if an exception occurs. e.g.


{code:gsh}
import java.io.File

new File("foo.txt").withReader { reader | 
	while (true) {
		line = reader.readLine()
	}
}
{code}


1.1 Using processes

Groovy provides a simple way to execute command line processes. 

{code:gsh}
process = "ls -l".execute()
println "Found text ${process.text}"
{code}

The expression returns a java.lang.Process instance which can have the in/out/err streams processed along with
the exit value inspected etc.

e.g.

{code:gsh}
process = "ls -l".execute()
process.in.eachLine { line | println line }
{code}
